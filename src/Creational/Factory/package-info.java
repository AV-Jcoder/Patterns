package Creational.Factory;

/**
 * Паттерн для создания объектов субклассов.
 *  Проблема:
 *  При развитии проекта количество субклассов постоянно
 * увеличивается. Поэтому приходится исправлять все места в коде, где
 * создаются объекты субкласса. Как сделать так, чтобы оставить программу
 * закрытой для модификации и открытой для расширения?
 *  Решение:
 *  Полномочия по созданию объектов дилегируются Фабрике.
 *  Это специальный класс-прослойка, инкапсулирующий
 *  создание объектов. Это означает, что если мы хотим создать
 *  объект, то должны:
 *  1) Создать объект Фабрика
 *  2) Обращатся к фабричному методу для создания экземпляров субклассов,
 *  которые нам требуются.
 *
 *  Плюсы:
 *  Код ответственный за создание экземпляров субклассов находится
 *  в одном месте, внутри фабричного метода. Нам больше не нужно
 *  искать места, где создаются объекты и бесконечно рефакторить код.
 *  Таким образом соблюдается принцип open/close.
 */